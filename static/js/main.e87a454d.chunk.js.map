{"version":3,"sources":["apis/adapter.js","actions/analogPosts.js","actions/fetchAnalogPosts.js","actions/favoritedPosts.js","components/PostCard.js","containers/PostsContainer.js","components/NavButton.js","components/NavBar.js","history.js","App.js","serviceWorker.js","reducers/index.js","reducers/analogPosts.js","reducers/favoritedPosts.js","index.js"],"names":["APIAdapter","fetch","then","resp","json","setAnalogPosts","posts","type","fetchAnalogPosts","dispatch","data","children","addFavoritedPost","post","removeFavoritePost","setFavoritedPosts","PostCard","renderButton","_this","props","favorite","renderLikeButton","renderDeleteButton","undefined","react_default","a","createElement","id","title","onClick","handleDelete","className","favoritedPosts","find","event","handleLike","imgUrl","upvotes","timeCreated","author","renderDate","createdDate","Date","createdDateString","getMonth","getDate","getFullYear","timeDiff","getTime","diffDays","Math","floor","diffHours","diffMinutes","concat","renderImageError","target","onerror","src","likeButton","document","getElementById","newFavorite","url","ups","created","includes","classList","remove","add","postTitle","foundPost","this","onError","alt","bullet","React","Component","connect","state","analogPosts","actions","PostsContainer","renderAllPosts","postArr","favorites","length","map","components_PostCard","key","uuid","NavButton","renderClassName","active","renderIcon","icon","handleClick","buttonText","NavBar","setState","history","push","renderActive","buttonId","renderFavText","favNum","currentPage","window","location","href","split","pop","_this2","components_NavButton","withRouter","createBrowserHistory","App","countFavorites","Home","Fragment","components_NavBar","containers_PostsContainer","Favorites","RedirectHome","Redirect","to","Router","Route","exact","path","render","Boolean","hostname","match","combineReducers","arguments","action","Object","toConsumableArray","filter","store","createStore","rootReducer","applyMiddleware","ReduxThunk","ReactDOM","es","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e87a454d.chunk.js","sourcesContent":["const R_ANALOG_URL = \"https://www.reddit.com/r/analog/top/.json\";\n\nexport default class APIAdapter {\n  static fetchAnalogPosts() {\n    return fetch(R_ANALOG_URL).then(resp => resp.json());\n  }\n}\n","export const setAnalogPosts = posts => {\n  return {\n    type: \"SET_ANALOG_POSTS\",\n    posts: posts\n  };\n};\n","import APIAdapter from \"../apis/adapter\";\nimport { setAnalogPosts } from \"./analogPosts\";\n\nexport const fetchAnalogPosts = () => {\n  return dispatch => {\n    APIAdapter.fetchAnalogPosts().then(posts => {\n      dispatch(setAnalogPosts(posts.data.children));\n    });\n  };\n};\n","export const addFavoritedPost = post => {\n  return {\n    type: \"ADD_FAVORITED_POST\",\n    post: post\n  };\n};\n\nexport const removeFavoritePost = post => {\n  return {\n    type: \"REMOVE_FAVORITED_POST\",\n    post: post\n  };\n};\n\nexport const setFavoritedPosts = posts => {\n  return {\n    type: \"SET_FAVORITED_POSTS\",\n    posts: posts\n  };\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions\";\n\nclass PostCard extends React.Component {\n  componentDidMount() {\n    if (this.props && this.props.favorite === \"no\") {\n      const postTitle = this.props.title;\n      const foundPost = this.props.favoritedPosts.find(function(post) {\n        return post.data.title === postTitle;\n      });\n\n      if (foundPost) {\n        const likeButton = document.getElementById(foundPost.data.title);\n        if (!likeButton.className.includes(\"liked\")) {\n          likeButton.classList.add(\"liked\");\n        }\n      }\n    }\n  }\n\n  renderButton = () => {\n    if (this.props.favorite === \"no\") {\n      return this.renderLikeButton();\n    } else {\n      return this.renderDeleteButton();\n    }\n  };\n\n  renderDeleteButton = () => {\n    if (this.props !== undefined) {\n      return (\n        <i\n          id={this.props.title}\n          onClick={this.handleDelete}\n          className=\"trash alternate icon delete-button\"\n        />\n      );\n    }\n  };\n\n  renderLikeButton = () => {\n    const foundPost = this.props.favoritedPosts.find(\n      post => post.title === this.props.title\n    );\n\n    if (foundPost) {\n      return (\n        <i\n          id={this.props.title}\n          onClick={event =>\n            this.handleLike(\n              this.props.title,\n              this.props.imgUrl,\n              this.props.upvotes,\n              this.props.timeCreated,\n              this.props.author,\n              event\n            )\n          }\n          className=\"heart icon like-button liked\"\n        />\n      );\n    } else {\n      return (\n        <i\n          id={this.props.title}\n          onClick={event =>\n            this.handleLike(\n              this.props.title,\n              this.props.imgUrl,\n              this.props.upvotes,\n              this.props.timeCreated,\n              this.props.author,\n              event\n            )\n          }\n          className=\"heart icon like-button\"\n        />\n      );\n    }\n  };\n\n  renderDate = () => {\n    const createdDate = new Date(this.props.timeCreated * 1000);\n\n    const createdDateString =\n      createdDate.getMonth() +\n      1 +\n      \"/\" +\n      createdDate.getDate() +\n      \"/\" +\n      createdDate.getFullYear();\n\n    const currentDate = new Date();\n\n    const timeDiff = currentDate.getTime() - createdDate.getTime();\n    const diffDays = Math.floor(timeDiff / 1000 / 60 / 60 / 24);\n    const diffHours = Math.floor(timeDiff / 1000 / 60 / 60);\n    const diffMinutes = Math.floor(timeDiff / 1000 / 60);\n\n    if (this.props.favorite === \"yes\") {\n      return createdDateString;\n    }\n    if (this.props.timeCreated === \"\") {\n      return \"?\";\n    }\n    if (diffDays > 7) {\n      return createdDateString;\n    }\n    if (diffDays === 1) {\n      return \"a day ago\";\n    }\n    if (diffDays < 1 && diffHours === 1) {\n      return `1 hour ago`;\n    }\n    if (diffDays < 1 && diffHours > 1) {\n      return `${diffHours}  hours ago`;\n    }\n    if (diffHours < 1 && diffMinutes > 1) {\n      return `${diffMinutes} minutes ago`;\n    }\n    if (diffMinutes < 1) {\n      return \"now\";\n    }\n  };\n\n  renderImageError = event => {\n    event.target.onerror = null;\n    event.target.src =\n      \"https://www.desktopbackground.org/p/2014/01/09/698675_wallpaper-reddit_1920x1200_h.jpg\";\n  };\n\n  handleLike = (title, imgUrl, upvotes, timeCreated, author, event) => {\n    const likeButton = document.getElementById(event.target.id);\n\n    const newFavorite = {\n      data: {\n        title: title,\n        url: imgUrl,\n        ups: upvotes,\n        created: timeCreated,\n        author: author\n      }\n    };\n\n    if (!likeButton.className.includes(\"liked\")) {\n      this.props.addFavoritedPost(newFavorite);\n      likeButton.classList.add(\"liked\");\n    } else if (likeButton.className.includes(\"liked\")) {\n      this.props.removeFavoritePost(newFavorite);\n      likeButton.classList.remove(\"liked\");\n    }\n  };\n\n  handleDelete = event => {\n    const postTitle = event.target.id;\n\n    const foundPost = this.props.favoritedPosts.find(function(post) {\n      return post.data.title === postTitle;\n    });\n\n    this.props.removeFavoritePost(foundPost);\n  };\n\n  render() {\n    return (\n      <div className=\"post-card-wrapper\">\n        {\n          <img\n            className=\"post-image\"\n            src={this.props.imgUrl}\n            onError={this.renderImageError}\n            alt=\"temp\"\n          />\n        }\n        <h1 className=\"post-title\">{this.props.title}</h1>\n        <div className=\"divider-wrapper\">\n          <div className=\"divider\" />\n        </div>\n        <div className=\"post-info\">\n          <p>\n            <i className=\"user icon\" />\n            {this.props.author}\n          </p>\n          <p className=\"bullet\">{this.props.bullet}</p>\n          <p>\n            <i className=\"clock outline icon\" />\n            {this.renderDate()}\n          </p>\n          <p className=\"bullet\">{this.props.bullet}</p>\n          <p>\n            <i className=\"bolt icon\" />\n            {this.props.upvotes}\n          </p>\n        </div>\n        <div className=\"like-button-container\">{this.renderButton()}</div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    analogPosts: state.favoritedPosts,\n    favoritedPosts: state.favoritedPosts\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  actions\n)(PostCard);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions\";\nimport PostCard from \"../components/PostCard\";\nimport uuid from \"uuid\";\n\nclass PostsContainer extends React.Component {\n  renderAllPosts = postArr => {\n    if (this.props.favorites === \"yes\" && postArr.length === 0) {\n      return <div className=\"no-fav\">no favorites yet. </div>;\n    }\n\n    if (postArr) {\n      return postArr.map(post => (\n        <PostCard\n          key={uuid()}\n          title={post.data.title}\n          imgUrl={post.data.url}\n          upvotes={post.data.ups}\n          timeCreated={post.data.created}\n          author={post.data.author}\n          bullet={\"\\u2022\"}\n          favorite={this.props.favorites}\n        />\n      ));\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"posts-container\">\n        {this.renderAllPosts(this.props.posts)}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    analogPosts: state.analogPosts\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  actions\n)(PostsContainer);\n","import React from \"react\";\n\nclass NavButton extends React.Component {\n  renderClassName = () => {\n    if (this.props.active === \"yes\") {\n      return \"nav-button active\";\n    } else {\n      return \"nav-button\";\n    }\n  };\n\n  renderIcon = () => {\n    if (this.props.icon === \"heart\") {\n      return <i className=\"heart icon\" />;\n    }\n    if (this.props.icon === \"alien\") {\n      return <i className=\"reddit alien icon\" />;\n    }\n  };\n\n  render() {\n    return (\n      <div\n        onClick={this.props.handleClick}\n        id={this.props.id}\n        className={this.renderClassName()}\n      >\n        {this.renderIcon()}\n        {this.props.buttonText}\n      </div>\n    );\n  }\n}\n\nexport default NavButton;\n","import React from \"react\";\nimport NavButton from \"./NavButton\";\nimport { withRouter } from \"react-router-dom\";\n\nclass NavBar extends React.Component {\n  state = {\n    active: \"home\"\n  };\n\n  componentDidMount() {\n    const location = window.location.href;\n    const currentPage = location.split(\"/\").pop();\n    this.setState({\n      active: currentPage\n    });\n  }\n\n  handleClick = id => {\n    if (this.state.active !== id) {\n      this.setState({\n        active: id\n      });\n    }\n    this.props.history.push(\"/\" + id);\n  };\n\n  renderActive = buttonId => {\n    if (this.state.active === buttonId) {\n      return \"yes\";\n    } else {\n      return \"no\";\n    }\n  };\n\n  renderFavText = () => {\n    return `favorites(${this.props.favNum})`;\n  };\n\n  render() {\n    return (\n      <div className=\"nav-bar-container\">\n        <NavButton\n          handleClick={() => this.handleClick(\"home\")}\n          active={this.renderActive(\"home\")}\n          id=\"home\"\n          icon=\"alien\"\n          buttonText=\"/r/analog\"\n        />\n        <NavButton\n          handleClick={() => this.handleClick(\"favorites\")}\n          active={this.renderActive(\"favorites\")}\n          id=\"favorites\"\n          icon=\"heart\"\n          buttonText={this.renderFavText()}\n        />\n      </div>\n    );\n  }\n}\n\nexport default withRouter(NavBar);\n","import { createBrowserHistory } from \"history\";\n\nexport default createBrowserHistory();\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Router, Route, Redirect } from \"react-router-dom\";\nimport PostsContainer from \"./containers/PostsContainer\";\nimport NavBar from \"./components/NavBar\";\nimport history from \"./history\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"./actions\";\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.fetchAnalogPosts();\n  }\n\n  countFavorites = () => {\n    return this.props.favoritedPosts.length;\n  };\n\n  Home = () => {\n    return (\n      <React.Fragment>\n        <NavBar favNum={this.countFavorites()} />\n        <PostsContainer posts={this.props.analogPosts} favorites=\"no\" />\n      </React.Fragment>\n    );\n  };\n\n  Favorites = () => {\n    return (\n      <React.Fragment>\n        <NavBar favNum={this.countFavorites()} />\n        <PostsContainer posts={this.props.favoritedPosts} favorites=\"yes\" />\n      </React.Fragment>\n    );\n  };\n\n  RedirectHome = () => {\n    return <Redirect to=\"/home\" />;\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Router history={history}>\n          <React.Fragment>\n            <Route exact path=\"/\" render={this.RedirectHome} />\n            <Route exact path=\"/home\" render={this.Home} />\n            <Route exact path=\"/favorites\" render={this.Favorites} />\n          </React.Fragment>\n        </Router>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    analogPosts: state.analogPosts,\n    favoritedPosts: state.favoritedPosts\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  actions\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport analogPosts from \"./analogPosts\";\nimport favoritedPosts from \"./favoritedPosts\";\n\nexport default combineReducers({\n  analogPosts,\n  favoritedPosts\n});\n","export default (state = [], action) => {\n  switch (action.type) {\n    case \"SET_ANALOG_POSTS\":\n      return action.posts;\n    default:\n      return state;\n  }\n};\n","export default (state = [], action) => {\n  switch (action.type) {\n    case \"ADD_FAVORITED_POST\":\n      return [...state, action.post];\n    case \"REMOVE_FAVORITED_POST\":\n      const stateDup = [...state];\n      const filteredState = stateDup.filter(\n        post => post.data.title !== action.post.data.title\n      );\n      return filteredState;\n    case \"SET_FAVORITED_POSTS\":\n      return action.posts;\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport rootReducer from \"./reducers/index\";\nimport ReduxThunk from \"redux-thunk\";\n\nlet store = createStore(rootReducer, applyMiddleware(ReduxThunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}